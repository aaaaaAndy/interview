(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{528:function(e,a,t){"use strict";t.r(a);var s=t(6),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),t("h2",{attrs:{id:"_1-webpack的基本功能和工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-webpack的基本功能和工作原理"}},[e._v("#")]),e._v(" 1. webpack的基本功能和工作原理？")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等等")])]),e._v(" "),t("li",[t("p",[e._v("文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等")])]),e._v(" "),t("li",[t("p",[e._v("代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载")])]),e._v(" "),t("li",[t("p",[e._v("模块合并：在采用模块化的项目有很多模块和文件，需要构建功能把模块分类合并成一个文件")])]),e._v(" "),t("li",[t("p",[e._v("自动刷新：监听本地源代码的变化，自动构建，刷新浏览器")])]),e._v(" "),t("li",[t("p",[e._v("代码校验：在代码被提交到仓库前需要检测代码是否符合规范，以及单元测试是否通过")])]),e._v(" "),t("li",[t("p",[e._v("自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。")])])]),e._v(" "),t("h2",{attrs:{id:"_2-webpack构建过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-webpack构建过程"}},[e._v("#")]),e._v(" 2. webpack构建过程")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("从entry里配置的module开始递归解析entry依赖的所有module")])]),e._v(" "),t("li",[t("p",[e._v("每找到一个module，就会根据配置的loader去找对应的转换规则")])]),e._v(" "),t("li",[t("p",[e._v("对module进行转换后，再解析出当前module依赖的module")])]),e._v(" "),t("li",[t("p",[e._v("这些模块会以entry为单位分组，一个entry和其所有依赖的module被分到一个组Chunk")])]),e._v(" "),t("li",[t("p",[e._v("最后webpack会把所有Chunk转换成文件输出")])]),e._v(" "),t("li",[t("p",[e._v("在整个流程中webpack会在恰当的时机执行plugin里定义的逻辑")])])]),e._v(" "),t("h2",{attrs:{id:"_3-webpack打包原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-webpack打包原理"}},[e._v("#")]),e._v(" 3. webpack打包原理")]),e._v(" "),t("p",[e._v("将所有依赖打包成一个bundle.js，通过代码分割成单元片段按需加载")]),e._v(" "),t("h2",{attrs:{id:"_4-什么是loader-plugins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是loader-plugins"}},[e._v("#")]),e._v(" 4. 什么是loader，plugins?")]),e._v(" "),t("ul",[t("li",[e._v("loader是用来告诉webpack如何转换某一类型的文件，并且引入到打包出的文件中。")]),e._v(" "),t("li",[e._v("plugins(插件)作用更大，可以打包优化，资源管理和注入环境变量")])]),e._v(" "),t("h2",{attrs:{id:"_5-什么是bundle-chunk-module"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-什么是bundle-chunk-module"}},[e._v("#")]),e._v(" 5. 什么是bundle,chunk,module?")]),e._v(" "),t("p",[e._v("bundle是webpack打包出来的文件，chunk是webpack在进行模块的依赖分析的时候，代码分割出来的代码块。module是开发中的单个模块")]),e._v(" "),t("h2",{attrs:{id:"_6-webpack-dev-server和http服务器如nginx有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-webpack-dev-server和http服务器如nginx有什么区别"}},[e._v("#")]),e._v(" 6. webpack-dev-server和http服务器如nginx有什么区别？")]),e._v(" "),t("p",[e._v("webpack-dev-server使用内存来存储webpack开发环境下的打包文件，并且可以使用模块热更新，相比传统http服务器开发更加简单高效")]),e._v(" "),t("h2",{attrs:{id:"_7-什么是tree-shaking-css可以tree-shaking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-什么是tree-shaking-css可以tree-shaking"}},[e._v("#")]),e._v(" 7. 什么是Tree-shaking？CSS可以Tree-shaking？")]),e._v(" "),t("p",[e._v("Tree-shaking是指在打包中取出那些引入了但在代码中没有被用到的死代码。webpack中通过uglifysPlugin来Tree-shaking JS。CSS需要使用purify-CSS")]),e._v(" "),t("h2",{attrs:{id:"_8-dev-server是怎么跑起来的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-dev-server是怎么跑起来的"}},[e._v("#")]),e._v(" 8. dev-server是怎么跑起来的")]),e._v(" "),t("p",[e._v("webpack-dev-server支持两种模式来自动刷新页面")]),e._v(" "),t("ul",[t("li",[e._v("iframe模式（页面放在iframe中，当发送改变时重载） 无需额外配置，只要以这种格式url访问即可。"),t("code",[e._v("http://localhost:8080/webpack-dev-server/index.html")])]),e._v(" "),t("li",[e._v("inline模式（将webpack-dev-server的客户端入口添加到bundle中） inline模式下url不用发生变化，但启动inline模式分两种情况")])]),e._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 以命令行启动webpack-dev-server有两种方式")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 方式1 在命令行中添加--inline命令")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 方式2 在webpack-config.js添加devServer:{inline: true}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 以node.js API启动有两种方式")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 方式1 添加webpack-dev-server/client?http://localhost:8080/到webpack配置的entry入口点")]),e._v("\nconfig"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("entry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("app"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("unshift")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"webpack-dev-server/client?http://localhost:8080/"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// 将<script src="http://localhost:8080/webpack-dev-server.js"><\/script>添加到html文件中')]),e._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);