(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{522:function(t,a,s){"use strict";s.r(a);var r=s(6),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"redux遵循的三个原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redux遵循的三个原则"}},[t._v("#")]),t._v(" "),s("code",[t._v("redux")]),t._v("遵循的三个原则")]),t._v(" "),s("h3",{attrs:{id:"_1-单一事实来源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-单一事实来源"}},[t._v("#")]),t._v(" 1. "),s("em",[s("strong",[t._v("单一事实来源：")])])]),t._v(" "),s("p",[t._v("​\t整个应用的状态存储在单个 store 中的对象/状态树里。单一状态树可以更容易地跟踪随时间的变化，并调试或检查应用程序。")]),t._v(" "),s("h3",{attrs:{id:"_2-状态是只读的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-状态是只读的"}},[t._v("#")]),t._v(" 2. "),s("em",[s("strong",[t._v("状态是只读的：")])])]),t._v(" "),s("p",[t._v("​\t改变状态的唯一方法是去触发一个动作。动作是描述变化的普通 JS 对象。就像 state 是数据的最小表示一样，该操作是对数据更改的最小表示。")]),t._v(" "),s("h3",{attrs:{id:"_3-使用纯函数进行更改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用纯函数进行更改"}},[t._v("#")]),t._v(" 3. "),s("em",[s("strong",[t._v("使用纯函数进行更改：")])])]),t._v(" "),s("p",[t._v("​\t为了指定状态树如何通过操作进行转换，你需要纯函数。纯函数是那些返回值仅取决于其参数值的函数。")]),t._v(" "),s("h2",{attrs:{id:"store-在-redux-中的意义是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#store-在-redux-中的意义是什么"}},[t._v("#")]),t._v(" "),s("code",[t._v("Store")]),t._v(" 在 "),s("code",[t._v("Redux")]),t._v(" 中的意义是什么？")]),t._v(" "),s("p",[t._v("​\t\tStore 是一个 JavaScript 对象，它可以保存程序的状态，并提供一些方法来访问状态、调度操作和注册侦听器。应用程序的整个状态/对象树保存在单一存储中。因此，Redux 非常简单且是可预测的。我们可以将中间件传递到 store 来处理数据，并记录改变存储状态的各种操作。所有操作都通过 reducer 返回一个新状态。")]),t._v(" "),s("h2",{attrs:{id:"什么是纯函数-有什么作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是纯函数-有什么作用"}},[t._v("#")]),t._v(" 什么是纯函数，有什么作用？")]),t._v(" "),s("p",[t._v("在我们解决什么是纯函数之前最好先来了解一下什么是函数。")]),t._v(" "),s("h3",{attrs:{id:"_1-什么是函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是函数"}},[t._v("#")]),t._v(" 1. 什么是函数")]),t._v(" "),s("p",[s("strong",[t._v("函数")]),t._v("是一个过程：它需要一些叫做参数的输入，然后产生一些叫做返回值的输出，函数可以用于以下目的：")]),t._v(" "),s("ul",[s("li",[t._v("映射：基础输入值产生的一些输出，函数把输入值映射到输出值")]),t._v(" "),s("li",[t._v("过程化：可以调用一个函数去执行一系列的步骤，这些步骤称为过程，而这种方式的编程称为面向过程编程；")]),t._v(" "),s("li",[t._v("I/O：一些函数存在于系统其他部分进行通信，例如屏幕、存储、系统日志或网络。")])]),t._v(" "),s("h3",{attrs:{id:"_2-纯函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-纯函数"}},[t._v("#")]),t._v(" 2. 纯函数")]),t._v(" "),s("p",[s("strong",[t._v("纯函数")]),t._v("都是关于映射的，函数将输入参数映射到返回值，这意味着对于每组输入，都存在对应的输出，函数将获取输入并返回相应的输出。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNumber")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("纯函数")]),t._v("是一个函数，其中：")]),t._v(" "),s("ul",[s("li",[t._v("给定相同的输入，将始终返回相同的输出")]),t._v(" "),s("li",[t._v("无副作用")])]),t._v(" "),s("h3",{attrs:{id:"_3-应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-应用"}},[t._v("#")]),t._v(" 3. 应用")]),t._v(" "),s("h2",{attrs:{id:"什么时候使用状态管理器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么时候使用状态管理器"}},[t._v("#")]),t._v(" 什么时候使用状态管理器")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/haizlin/fe-interview/issues/953",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么时候使用状态管理器？"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);