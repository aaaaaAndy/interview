(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{525:function(t,r,e){"use strict";e.r(r);var a=e(6),s=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"redux遵循的三个原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux遵循的三个原则"}},[t._v("#")]),t._v(" "),e("code",[t._v("redux")]),t._v("遵循的三个原则")]),t._v(" "),e("h3",{attrs:{id:"_1-单一事实来源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-单一事实来源"}},[t._v("#")]),t._v(" 1. "),e("em",[e("strong",[t._v("单一事实来源：")])])]),t._v(" "),e("p",[t._v("​\t整个应用的状态存储在单个 store 中的对象/状态树里。单一状态树可以更容易地跟踪随时间的变化，并调试或检查应用程序。")]),t._v(" "),e("h3",{attrs:{id:"_2-状态是只读的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-状态是只读的"}},[t._v("#")]),t._v(" 2. "),e("em",[e("strong",[t._v("状态是只读的：")])])]),t._v(" "),e("p",[t._v("​\t改变状态的唯一方法是去触发一个动作。动作是描述变化的普通 JS 对象。就像 state 是数据的最小表示一样，该操作是对数据更改的最小表示。")]),t._v(" "),e("h3",{attrs:{id:"_3-使用纯函数进行更改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用纯函数进行更改"}},[t._v("#")]),t._v(" 3. "),e("em",[e("strong",[t._v("使用纯函数进行更改：")])])]),t._v(" "),e("p",[t._v("​\t为了指定状态树如何通过操作进行转换，你需要纯函数。纯函数是那些返回值仅取决于其参数值的函数。")]),t._v(" "),e("h2",{attrs:{id:"store-在-redux-中的意义是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#store-在-redux-中的意义是什么"}},[t._v("#")]),t._v(" "),e("code",[t._v("Store")]),t._v(" 在 "),e("code",[t._v("Redux")]),t._v(" 中的意义是什么？")]),t._v(" "),e("p",[t._v("​\t\tStore 是一个 JavaScript 对象，它可以保存程序的状态，并提供一些方法来访问状态、调度操作和注册侦听器。应用程序的整个状态/对象树保存在单一存储中。因此，Redux 非常简单且是可预测的。我们可以将中间件传递到 store 来处理数据，并记录改变存储状态的各种操作。所有操作都通过 reducer 返回一个新状态。")]),t._v(" "),e("h2",{attrs:{id:"什么时候使用状态管理器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么时候使用状态管理器"}},[t._v("#")]),t._v(" 什么时候使用状态管理器")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/haizlin/fe-interview/issues/953",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么时候使用状态管理器？"),e("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=s.exports}}]);