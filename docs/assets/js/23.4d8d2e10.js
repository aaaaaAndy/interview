(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{530:function(_,v,e){"use strict";e.r(v);var o=e(6),c=Object(o.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h2",{attrs:{id:"npm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm"}},[_._v("#")]),_._v(" npm")]),_._v(" "),e("h3",{attrs:{id:"_1-剖析package-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-剖析package-json"}},[_._v("#")]),_._v(" 1. 剖析package.json")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/aaaaaAndy/picture/main/images/20210129140046.jpg",alt:"20201111160224"}})]),_._v(" "),e("p",[_._v("在 "),e("code",[_._v("Node.js")]),_._v(" 中，模块是一个库或框架，也是一个 "),e("code",[_._v("Node.js")]),_._v(" 项目。"),e("code",[_._v("Node.js")]),_._v(" 项目遵循模块化的架构，当我们创建了一个 "),e("code",[_._v("Node.js")]),_._v(" 项目，意味着创建了一个模块，这个模块必须有一个描述文件，即 "),e("code",[_._v("package.json")])]),_._v(" "),e("h3",{attrs:{id:"_2-npm命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-npm命令"}},[_._v("#")]),_._v(" 2. npm命令")]),_._v(" "),e("p",[_._v("以"),e("code",[_._v("jollychic")]),_._v("包为例：")]),_._v(" "),e("ul",[e("li",[_._v("查看包是否被占用: "),e("code",[_._v("npm view jollychic")])]),_._v(" "),e("li",[_._v("查看包版本："),e("code",[_._v("npm view jollychic version")])]),_._v(" "),e("li",[_._v("升级修订版本号："),e("code",[_._v("npm version patch")])]),_._v(" "),e("li",[_._v("升级次版本号："),e("code",[_._v("npm version minor")])]),_._v(" "),e("li",[_._v("升级主版本号："),e("code",[_._v("npm version major")])]),_._v(" "),e("li",[_._v("列出有哪些还没有升级到最新版本的依赖："),e("code",[_._v("npm outdated")])]),_._v(" "),e("li",[_._v("升级所有的红色依赖："),e("code",[_._v("npm update")])])]),_._v(" "),e("h3",{attrs:{id:"_3-npm版本管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-npm版本管理"}},[_._v("#")]),_._v(" 3. npm版本管理")]),_._v(" "),e("p",[e("code",[_._v("npm包")]),_._v(" 中的模块版本都需要遵循 "),e("code",[_._v("SemVer")]),_._v("规范——由 "),e("code",[_._v("Github")]),_._v(" 起草的一个具有指导意义的，统一的版本号表示规则。实际上就是 "),e("code",[_._v("Semantic Version")]),_._v("（语义化版本）的缩写。")]),_._v(" "),e("ol",[e("li",[_._v("标准版本")])]),_._v(" "),e("p",[e("code",[_._v("SemVer")]),_._v("规范的标准版本号采用 "),e("code",[_._v("X.Y.Z")]),_._v(" 的格式，其中 X、Y 和 Z 为非负的整数，且禁止在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素必须以数值来递增。")]),_._v(" "),e("ul",[e("li",[_._v("主版本号("),e("code",[_._v("major")]),_._v(")：当你做了不兼容的API 修改")]),_._v(" "),e("li",[_._v("次版本号("),e("code",[_._v("minor")]),_._v(")：当你做了向下兼容的功能性新增")]),_._v(" "),e("li",[_._v("修订号("),e("code",[_._v("patch")]),_._v(")：当你做了向下兼容的问题修正。")])]),_._v(" "),e("p",[_._v("例如："),e("code",[_._v("1.9.1 -> 1.10.0 -> 1.11.0")])]),_._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[_._v("先行版本")])]),_._v(" "),e("p",[_._v("当某个版本改动比较大、并非稳定而且可能无法满足预期的兼容性需求时，你可能要先发布一个先行版本。")]),_._v(" "),e("p",[_._v("先行版本号可以加到“主版本号.次版本号.修订号”的后面，先加上一个连接号再加上一连串以句点分隔的标识符和版本编译信息。")]),_._v(" "),e("ul",[e("li",[_._v("内部版本("),e("code",[_._v("alpha")]),_._v("):")]),_._v(" "),e("li",[_._v("公测版本("),e("code",[_._v("beta")]),_._v("):")]),_._v(" "),e("li",[_._v("正式版本的候选版本"),e("code",[_._v("rc")]),_._v(": 即 "),e("code",[_._v("Release candiate")])])]),_._v(" "),e("h3",{attrs:{id:"_4-lock文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-lock文件"}},[_._v("#")]),_._v(" 4. "),e("code",[_._v("lock")]),_._v("文件")]),_._v(" "),e("p",[_._v("实际开发中，经常会因为各种依赖不一致而产生奇怪的问题，或者在某些场景下，我们不希望依赖被更新，建议在开发中使用 "),e("code",[_._v("package-lock.json")]),_._v("。")]),_._v(" "),e("p",[_._v("锁定依赖版本意味着在我们不手动执行更新的情况下，每次安装依赖都会安装固定版本。保证整个团队使用版本号一致的依赖。")]),_._v(" "),e("blockquote",[e("p",[_._v("使用 package-lock.json 要确保npm的版本在5.6以上，因为在5.0 - 5.6中间，对 package-lock.json的处理逻辑进行过几次更新，5.6版本后处理逻辑逐渐稳定。")])]),_._v(" "),e("h3",{attrs:{id:"_5-剖析npm-install运行原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-剖析npm-install运行原理"}},[_._v("#")]),_._v(" 5. 剖析"),e("code",[_._v("npm install")]),_._v("运行原理")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/aaaaaAndy/picture/main/images/20210129140117.jpg",alt:"20201111165231"}})]),_._v(" "),e("p",[e("code",[_._v("npm install")]),_._v(" 大概会经过上面的几个流程，这一章就来讲一讲各个流程的实现细节、发展以及为何要这样实现。")]),_._v(" "),e("h4",{attrs:{id:"_5-1-嵌套结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-嵌套结构"}},[_._v("#")]),_._v(" 5.1 嵌套结构")]),_._v(" "),e("p",[_._v("在 "),e("code",[_._v("npm")]),_._v(" 的早期版本， "),e("code",[_._v("npm")]),_._v(" 处理依赖的方式简单粗暴，以递归的形式，严格按照 "),e("code",[_._v("package.json")]),_._v(" 结构以及子依赖包的 "),e("code",[_._v("package.json")]),_._v(" 结构将依赖安装到他们各自的 "),e("code",[_._v("node_modules")]),_._v(" 中。直到有子依赖包不在依赖其他模块。")]),_._v(" "),e("p",[_._v("这样的方式优点很明显， "),e("code",[_._v("node_modules")]),_._v(" 的结构和 "),e("code",[_._v("package.json")]),_._v(" 结构一一对应，层级结构明显，并且保证了每次安装目录结构都是相同的。")]),_._v(" "),e("p",[_._v("但是，试想一下，如果你依赖的模块非常之多，你的 "),e("code",[_._v("node_modules")]),_._v(" 将非常庞大，嵌套层级非常之深：")]),_._v(" "),e("ul",[e("li",[_._v("在不同层级的依赖中，可能引用了同一个模块，导致大量冗余。")]),_._v(" "),e("li",[_._v("在 "),e("code",[_._v("Windows")]),_._v(" 系统中，文件路径最大长度为260个字符，嵌套层级过深可能导致不可预知的问题。")])]),_._v(" "),e("h4",{attrs:{id:"_5-2-扁平结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-扁平结构"}},[_._v("#")]),_._v(" 5.2 扁平结构")]),_._v(" "),e("p",[_._v("为了解决以上问题，"),e("code",[_._v("NPM")]),_._v(" 在 "),e("code",[_._v("3.x")]),_._v(" 版本做了一次较大更新。其将早期的嵌套结构改为扁平结构：")]),_._v(" "),e("ul",[e("li",[_._v("安装模块时，不管其是直接依赖还是子依赖的依赖，优先将其安装在 "),e("code",[_._v("node_modules")]),_._v(" 根目录。")]),_._v(" "),e("li",[_._v("当安装到相同模块时，判断已安装的模块版本是否符合新模块的版本范围，如果符合则跳过，不符合则在当前模块的 "),e("code",[_._v("node_modules")]),_._v(" 下安装该模块。")])]),_._v(" "),e("p",[_._v("对应的，如果我们在项目代码中引用了一个模块，模块查找流程如下：")]),_._v(" "),e("ul",[e("li",[_._v("在当前模块路径下搜索")]),_._v(" "),e("li",[_._v("在当前模块 "),e("code",[_._v("node_modules")]),_._v(" 路径下搜素")]),_._v(" "),e("li",[_._v("在上级模块的 "),e("code",[_._v("node_modules")]),_._v(" 路径下搜索")]),_._v(" "),e("li",[_._v("...")]),_._v(" "),e("li",[_._v("直到搜索到全局路径中的 "),e("code",[_._v("node_modules")])])]),_._v(" "),e("p",[_._v("所以 "),e("code",[_._v("npm 3.x")]),_._v(" 版本并未完全解决老版本的模块冗余问题，甚至还会带来新的问题。")]),_._v(" "),e("p",[_._v("试想一下，你的APP假设没有依赖 "),e("code",[_._v("base64-js@1.0.1")]),_._v(" 版本，而你同时依赖了依赖不同 "),e("code",[_._v("base64-js")]),_._v(" 版本的 "),e("code",[_._v("buffer")]),_._v(" 和 "),e("code",[_._v("buffer2")]),_._v("。由于在执行 "),e("code",[_._v("npm install")]),_._v(" 的时候，按照 "),e("code",[_._v("package.json")]),_._v(" 里依赖的顺序依次解析，则 "),e("code",[_._v("buffer")]),_._v(" 和 "),e("code",[_._v("buffer2")]),_._v(" 在  "),e("code",[_._v("package.json")]),_._v(" 的放置顺序则决定了 "),e("code",[_._v("node_modules")]),_._v(" 的依赖结构：")]),_._v(" "),e("h4",{attrs:{id:"_5-3-lock文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-lock文件"}},[_._v("#")]),_._v(" 5.3 "),e("code",[_._v("lock")]),_._v("文件")]),_._v(" "),e("p",[_._v("为了解决 "),e("code",[_._v("npm install")]),_._v(" 的不确定性问题，在 "),e("code",[_._v("npm 5.x")]),_._v(" 版本新增了 "),e("code",[_._v("package-lock.json")]),_._v(" 文件，而安装方式还沿用了 "),e("code",[_._v("npm 3.x")]),_._v(" 的扁平化的方式。")]),_._v(" "),e("p",[e("code",[_._v("package-lock.json")]),_._v(" 的作用是锁定依赖结构，即只要你目录下有 "),e("code",[_._v("package-lock.json")]),_._v(" 文件，那么你每次执行 "),e("code",[_._v("npm install")]),_._v(" 后生成的 "),e("code",[_._v("node_modules")]),_._v(" 目录结构一定是完全相同的。")]),_._v(" "),e("h3",{attrs:{id:"_6-整体流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-整体流程"}},[_._v("#")]),_._v(" 6. 整体流程")]),_._v(" "),e("p",[_._v("检查 "),e("code",[_._v(".npmrc")]),_._v(" 文件：优先级为：项目级的 "),e("code",[_._v(".npmrc")]),_._v(" 文件 > 用户级的 "),e("code",[_._v(".npmrc")]),_._v(" 文件> 全局级的 "),e("code",[_._v(".npmrc")]),_._v(" 文件 > npm 内置的 "),e("code",[_._v(".npmrc")]),_._v(" 文件")]),_._v(" "),e("p",[_._v("检查项目中有无 "),e("code",[_._v("lock")]),_._v(" 文件。")]),_._v(" "),e("p",[_._v("无 "),e("code",[_._v("lock")]),_._v(" 文件：")]),_._v(" "),e("ul",[e("li",[e("p",[_._v("从 "),e("code",[_._v("npm")]),_._v(" 远程仓库获取包信息")])]),_._v(" "),e("li",[e("p",[_._v("根据")]),_._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("package.json\n")])])]),e("p",[_._v("构建依赖树，构建过程：")]),_._v(" "),e("ul",[e("li",[_._v("构建依赖树时，不管其是直接依赖还是子依赖的依赖，优先将其放置在 "),e("code",[_._v("node_modules")]),_._v(" 根目录。")]),_._v(" "),e("li",[_._v("当遇到相同模块时，判断已放置在依赖树的模块版本是否符合新模块的版本范围，如果符合则跳过，不符合则在当前模块的 "),e("code",[_._v("node_modules")]),_._v(" 下放置该模块。")]),_._v(" "),e("li",[_._v("注意这一步只是确定逻辑上的依赖树，并非真正的安装，后面会根据这个依赖结构去下载或拿到缓存中的依赖包")])])]),_._v(" "),e("li",[e("p",[_._v("在缓存中依次查找依赖树中的每个包")]),_._v(" "),e("ul",[e("li",[_._v("不存在缓存：\n"),e("ul",[e("li",[_._v("从 "),e("code",[_._v("npm")]),_._v(" 远程仓库下载包")]),_._v(" "),e("li",[_._v("校验包的完整性")]),_._v(" "),e("li",[_._v("校验不通过：\n"),e("ul",[e("li",[_._v("重新下载")])])]),_._v(" "),e("li",[_._v("校验通过：\n"),e("ul",[e("li",[_._v("将下载的包复制到 "),e("code",[_._v("npm")]),_._v(" 缓存目录")]),_._v(" "),e("li",[_._v("将下载的包按照依赖结构解压到 "),e("code",[_._v("node_modules")])])])])])]),_._v(" "),e("li",[_._v("存在缓存：将缓存按照依赖结构解压到 "),e("code",[_._v("node_modules")])])])]),_._v(" "),e("li",[e("p",[_._v("将包解压到 "),e("code",[_._v("node_modules")])])]),_._v(" "),e("li",[e("p",[_._v("生成 "),e("code",[_._v("lock")]),_._v(" 文件")])])]),_._v(" "),e("p",[_._v("有 "),e("code",[_._v("lock")]),_._v(" 文件：")]),_._v(" "),e("ul",[e("li",[_._v("检查 "),e("code",[_._v("package.json")]),_._v(" 中的依赖版本是否和 "),e("code",[_._v("package-lock.json")]),_._v(" 中的依赖有冲突。")]),_._v(" "),e("li",[_._v("如果没有冲突，直接跳过获取包信息、构建依赖树过程，开始在缓存中查找包信息，后续过程相同")])]),_._v(" "),e("h3",{attrs:{id:"_7-yarn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-yarn"}},[_._v("#")]),_._v(" 7. "),e("code",[_._v("yarn")])]),_._v(" "),e("p",[e("code",[_._v("yarn")]),_._v(" 是在 "),e("code",[_._v("2016")]),_._v(" 年发布的，那时 "),e("code",[_._v("npm")]),_._v(" 还处于 "),e("code",[_._v("V3")]),_._v(" 时期，那时候还没有 "),e("code",[_._v("package-lock.json")]),_._v(" 文件，就像上面我们提到的：不稳定性、安装速度慢等缺点经常会受到广大开发者吐槽。此时，"),e("code",[_._v("yarn")]),_._v(" 诞生。")]),_._v(" "),e("p",[_._v("上面是官网提到的 "),e("code",[_._v("yarn")]),_._v(" 的优点，在那个时候还是非常吸引人的。当然，后来 "),e("code",[_._v("npm")]),_._v(" 也意识到了自己的问题，进行了很多次优化，在后面的优化（"),e("code",[_._v("lock")]),_._v("文件、缓存、默认-s...）中，我们多多少少能看到 "),e("code",[_._v("yarn")]),_._v(" 的影子，可见 "),e("code",[_._v("yarn")]),_._v(" 的设计还是非常优秀的。")]),_._v(" "),e("p",[e("code",[_._v("yarn")]),_._v(" 也是采用的是 "),e("code",[_._v("npm v3")]),_._v(" 的扁平结构来管理依赖，安装依赖后默认会生成一个 "),e("code",[_._v("yarn.lock")]),_._v(" 文件，还是上面的依赖关系，我们看看 "),e("code",[_._v("yarn.lock")]),_._v(" 的结构。")]),_._v(" "),e("p",[_._v("可见其和 "),e("code",[_._v("package-lock.json")]),_._v(" 文件还是比较类似的，还有一些区别就是：")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("package-lock.json")]),_._v(" 使用的是 "),e("code",[_._v("json")]),_._v(" 格式，"),e("code",[_._v("yarn.lock")]),_._v(" 使用的是一种自定义格式")]),_._v(" "),e("li",[e("code",[_._v("yarn.lock")]),_._v(" 中子依赖的版本号不是固定的，意味着单独又一个 "),e("code",[_._v("yarn.lock")]),_._v(" 确定不了 "),e("code",[_._v("node_modules")]),_._v(" 目录结构，还需要和 "),e("code",[_._v("package.json")]),_._v(" 文件进行配合。而 "),e("code",[_._v("package-lock.json")]),_._v(" 只需要一个文件即可确定。")])]),_._v(" "),e("h2",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[_._v("#")])])])}),[],!1,null,null,null);v.default=c.exports}}]);